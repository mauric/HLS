-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.2
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gaussian_sep is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_r_address1 : OUT STD_LOGIC_VECTOR (20 downto 0);
    in_r_ce1 : OUT STD_LOGIC;
    in_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of gaussian_sep is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (5 downto 0) := "100101";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (5 downto 0) := "100111";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (5 downto 0) := "101001";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (5 downto 0) := "101101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3E7C8F32 : STD_LOGIC_VECTOR (31 downto 0) := "00111110011111001000111100110010";
    constant ap_const_lv32_3F1B5159 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000110110101000101011001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_436 : STD_LOGIC_VECTOR (10 downto 0) := "10000110110";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv11_77E : STD_LOGIC_VECTOR (10 downto 0) := "11101111110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal tmp_address0 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_ce0 : STD_LOGIC;
    signal tmp_we0 : STD_LOGIC;
    signal tmp_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_address1 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_ce1 : STD_LOGIC;
    signal tmp_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_196 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_190_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_205 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_fu_228_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_1_reg_542 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_fu_234_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_548 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_2_fu_252_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_2_reg_561 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_reg_571 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_addr1_fu_390_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_addr1_reg_581 : STD_LOGIC_VECTOR (23 downto 0);
    signal in_load_1_reg_586 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_193_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_606 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_fu_424_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_2_reg_619 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_fu_436_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_reg_624 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond3_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_515_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_reg_637 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_addr4_fu_524_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_addr4_reg_647 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_2_fu_538_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_2_reg_662 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar3_reg_124 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_reg_136 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_147 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_reg_159 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_fu_399_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_171_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_171_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_187_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_190_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_193_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_262_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_2_fu_274_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl_cast_fu_270_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl1_cast_fu_282_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_addr6_fu_286_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_addr7_fu_296_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_addr6_fu_286_p2_temp: signed (23-1 downto 0);
    signal tmp_5_trn5_cast_fu_258_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_addr7_fu_296_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_3_fu_306_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr7_fu_296_p2_temp: signed (24-1 downto 0);
    signal tmp_4_fu_311_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_5_fu_322_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl2_cast_fu_318_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl3_cast_fu_329_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_addr3_fu_333_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_addr4_fu_343_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_addr3_fu_333_p2_temp: signed (23-1 downto 0);
    signal p_addr4_fu_343_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_16_fu_353_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr4_fu_343_p2_temp: signed (24-1 downto 0);
    signal tmp_18_fu_358_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_21_fu_369_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl4_cast_fu_365_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl5_cast_fu_376_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_addr_fu_380_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_addr1_fu_390_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_addr_fu_380_p2_temp: signed (23-1 downto 0);
    signal tmp_25_fu_399_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr1_reg_581_temp: signed (24-1 downto 0);
    signal tmp_26_fu_452_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_27_fu_464_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl6_cast_fu_460_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl7_cast_fu_472_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_addr1_fu_476_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_addr2_fu_486_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_addr1_cast_fu_482_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_addr1_fu_476_p2_temp: signed (23-1 downto 0);
    signal tmp_16_trn_cast_fu_448_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_addr2_fu_486_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_28_fu_496_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_addr2_fu_486_p2_temp: signed (24-1 downto 0);
    signal tmp_addr3_fu_505_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_18_trn_cast_fu_501_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_addr3_fu_505_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_29_fu_515_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_addr3_fu_505_p2_temp: signed (24-1 downto 0);
    signal tmp8_fu_430_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_addr4_fu_524_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_21_trn_cast_fu_520_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_30_fu_533_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_addr4_reg_647_temp: signed (24-1 downto 0);
    signal grp_fu_187_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_171_ce : STD_LOGIC;
    signal grp_fu_175_ce : STD_LOGIC;
    signal grp_fu_180_ce : STD_LOGIC;
    signal grp_fu_187_ce : STD_LOGIC;
    signal grp_fu_190_ce : STD_LOGIC;
    signal grp_fu_193_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component gaussian_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gaussian_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gaussian_fptoui_32ns_64_4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component gaussian_sitofp_64ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gaussian_sep_tmp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (20 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    tmp_U : component gaussian_sep_tmp
    generic map (
        DataWidth => 32,
        AddressRange => 2073600,
        AddressWidth => 21)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp_address0,
        ce0 => tmp_ce0,
        we0 => tmp_we0,
        d0 => tmp_d0,
        q0 => tmp_q0,
        address1 => tmp_address1,
        ce1 => tmp_ce1,
        q1 => tmp_q1);

    gaussian_fadd_32ns_32ns_32_5_full_dsp_U1 : component gaussian_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_171_p0,
        din1 => grp_fu_171_p1,
        ce => grp_fu_171_ce,
        dout => grp_fu_171_p2);

    gaussian_fmul_32ns_32ns_32_4_max_dsp_U2 : component gaussian_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 2,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_175_p0,
        din1 => grp_fu_175_p1,
        ce => grp_fu_175_ce,
        dout => grp_fu_175_p2);

    gaussian_fmul_32ns_32ns_32_4_max_dsp_U3 : component gaussian_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 3,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_180_p0,
        din1 => grp_fu_180_p1,
        ce => grp_fu_180_ce,
        dout => grp_fu_180_p2);

    gaussian_fptoui_32ns_64_4_U4 : component gaussian_fptoui_32ns_64_4
    generic map (
        ID => 4,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_187_p0,
        ce => grp_fu_187_ce,
        dout => grp_fu_187_p1);

    gaussian_sitofp_64ns_32_6_U5 : component gaussian_sitofp_64ns_32_6
    generic map (
        ID => 5,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_190_p0,
        ce => grp_fu_190_ce,
        dout => grp_fu_190_p1);

    gaussian_sitofp_64ns_32_6_U6 : component gaussian_sitofp_64ns_32_6
    generic map (
        ID => 6,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_193_p0,
        ce => grp_fu_193_ce,
        dout => grp_fu_193_p1);




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- i_1_reg_147 assign process. --
    i_1_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st27_fsm_26 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond3_fu_442_p2)))) then 
                i_1_reg_147 <= i_2_reg_619;
            elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond1_fu_240_p2)))) then 
                i_1_reg_147 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- indvar3_reg_124 assign process. --
    indvar3_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((exitcond2_fu_246_p2 = ap_const_lv1_0)))) then 
                indvar3_reg_124 <= i_reg_548;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                indvar3_reg_124 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- indvar_reg_159 assign process. --
    indvar_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st26_fsm_25 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_418_p2))) then 
                indvar_reg_159 <= ap_const_lv11_0;
            elsif ((ap_ST_st46_fsm_45 = ap_CS_fsm)) then 
                indvar_reg_159 <= j_1_reg_624;
            end if; 
        end if;
    end process;

    -- j_reg_136 assign process. --
    j_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_240_p2))) then 
                j_reg_136 <= ap_const_lv11_0;
            elsif ((ap_ST_st25_fsm_24 = ap_CS_fsm)) then 
                j_reg_136 <= j_2_reg_561;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st26_fsm_25 = ap_CS_fsm)) then
                i_2_reg_619 <= i_2_fu_424_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                i_reg_548 <= i_fu_234_p2;
                tmp_1_1_reg_542 <= tmp_1_1_fu_228_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then
                in_load_1_reg_586 <= in_r_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st27_fsm_26 = ap_CS_fsm)) then
                j_1_reg_624 <= j_1_fu_436_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
                j_2_reg_561 <= j_2_fu_252_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (exitcond2_fu_246_p2 = ap_const_lv1_0))) then
                p_addr1_reg_581 <= p_addr1_fu_390_p2;
                tmp_16_reg_571(0) <= tmp_16_fu_353_p1(0);
    tmp_16_reg_571(1) <= tmp_16_fu_353_p1(1);
    tmp_16_reg_571(2) <= tmp_16_fu_353_p1(2);
    tmp_16_reg_571(3) <= tmp_16_fu_353_p1(3);
    tmp_16_reg_571(4) <= tmp_16_fu_353_p1(4);
    tmp_16_reg_571(5) <= tmp_16_fu_353_p1(5);
    tmp_16_reg_571(6) <= tmp_16_fu_353_p1(6);
    tmp_16_reg_571(7) <= tmp_16_fu_353_p1(7);
    tmp_16_reg_571(8) <= tmp_16_fu_353_p1(8);
    tmp_16_reg_571(9) <= tmp_16_fu_353_p1(9);
    tmp_16_reg_571(10) <= tmp_16_fu_353_p1(10);
    tmp_16_reg_571(11) <= tmp_16_fu_353_p1(11);
    tmp_16_reg_571(12) <= tmp_16_fu_353_p1(12);
    tmp_16_reg_571(13) <= tmp_16_fu_353_p1(13);
    tmp_16_reg_571(14) <= tmp_16_fu_353_p1(14);
    tmp_16_reg_571(15) <= tmp_16_fu_353_p1(15);
    tmp_16_reg_571(16) <= tmp_16_fu_353_p1(16);
    tmp_16_reg_571(17) <= tmp_16_fu_353_p1(17);
    tmp_16_reg_571(18) <= tmp_16_fu_353_p1(18);
    tmp_16_reg_571(19) <= tmp_16_fu_353_p1(19);
    tmp_16_reg_571(20) <= tmp_16_fu_353_p1(20);
    tmp_16_reg_571(21) <= tmp_16_fu_353_p1(21);
    tmp_16_reg_571(22) <= tmp_16_fu_353_p1(22);
    tmp_16_reg_571(23) <= tmp_16_fu_353_p1(23);
    tmp_16_reg_571(24) <= tmp_16_fu_353_p1(24);
    tmp_16_reg_571(25) <= tmp_16_fu_353_p1(25);
    tmp_16_reg_571(26) <= tmp_16_fu_353_p1(26);
    tmp_16_reg_571(27) <= tmp_16_fu_353_p1(27);
    tmp_16_reg_571(28) <= tmp_16_fu_353_p1(28);
    tmp_16_reg_571(29) <= tmp_16_fu_353_p1(29);
    tmp_16_reg_571(30) <= tmp_16_fu_353_p1(30);
    tmp_16_reg_571(31) <= tmp_16_fu_353_p1(31);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) or (ap_ST_st5_fsm_4 = ap_CS_fsm))) then
                reg_196 <= in_r_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st10_fsm_9 = ap_CS_fsm) or (ap_ST_st15_fsm_14 = ap_CS_fsm))) then
                reg_200 <= grp_fu_190_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st14_fsm_13 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm) or (ap_ST_st31_fsm_30 = ap_CS_fsm) or (ap_ST_st36_fsm_35 = ap_CS_fsm))) then
                reg_205 <= grp_fu_175_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st14_fsm_13 = ap_CS_fsm) or (ap_ST_st31_fsm_30 = ap_CS_fsm))) then
                reg_211 <= grp_fu_180_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st19_fsm_18 = ap_CS_fsm) or (ap_ST_st36_fsm_35 = ap_CS_fsm) or (ap_ST_st24_fsm_23 = ap_CS_fsm) or (ap_ST_st41_fsm_40 = ap_CS_fsm))) then
                reg_216 <= grp_fu_171_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st45_fsm_44 = ap_CS_fsm)) then
                tmp_1_2_reg_662 <= tmp_1_2_fu_538_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st27_fsm_26 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond3_fu_442_p2))) then
                tmp_29_reg_637(0) <= tmp_29_fu_515_p1(0);
    tmp_29_reg_637(1) <= tmp_29_fu_515_p1(1);
    tmp_29_reg_637(2) <= tmp_29_fu_515_p1(2);
    tmp_29_reg_637(3) <= tmp_29_fu_515_p1(3);
    tmp_29_reg_637(4) <= tmp_29_fu_515_p1(4);
    tmp_29_reg_637(5) <= tmp_29_fu_515_p1(5);
    tmp_29_reg_637(6) <= tmp_29_fu_515_p1(6);
    tmp_29_reg_637(7) <= tmp_29_fu_515_p1(7);
    tmp_29_reg_637(8) <= tmp_29_fu_515_p1(8);
    tmp_29_reg_637(9) <= tmp_29_fu_515_p1(9);
    tmp_29_reg_637(10) <= tmp_29_fu_515_p1(10);
    tmp_29_reg_637(11) <= tmp_29_fu_515_p1(11);
    tmp_29_reg_637(12) <= tmp_29_fu_515_p1(12);
    tmp_29_reg_637(13) <= tmp_29_fu_515_p1(13);
    tmp_29_reg_637(14) <= tmp_29_fu_515_p1(14);
    tmp_29_reg_637(15) <= tmp_29_fu_515_p1(15);
    tmp_29_reg_637(16) <= tmp_29_fu_515_p1(16);
    tmp_29_reg_637(17) <= tmp_29_fu_515_p1(17);
    tmp_29_reg_637(18) <= tmp_29_fu_515_p1(18);
    tmp_29_reg_637(19) <= tmp_29_fu_515_p1(19);
    tmp_29_reg_637(20) <= tmp_29_fu_515_p1(20);
    tmp_29_reg_637(21) <= tmp_29_fu_515_p1(21);
    tmp_29_reg_637(22) <= tmp_29_fu_515_p1(22);
    tmp_29_reg_637(23) <= tmp_29_fu_515_p1(23);
    tmp_29_reg_637(24) <= tmp_29_fu_515_p1(24);
    tmp_29_reg_637(25) <= tmp_29_fu_515_p1(25);
    tmp_29_reg_637(26) <= tmp_29_fu_515_p1(26);
    tmp_29_reg_637(27) <= tmp_29_fu_515_p1(27);
    tmp_29_reg_637(28) <= tmp_29_fu_515_p1(28);
    tmp_29_reg_637(29) <= tmp_29_fu_515_p1(29);
    tmp_29_reg_637(30) <= tmp_29_fu_515_p1(30);
    tmp_29_reg_637(31) <= tmp_29_fu_515_p1(31);
                tmp_addr4_reg_647 <= tmp_addr4_fu_524_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then
                tmp_s_reg_606 <= grp_fu_193_p1;
            end if;
        end if;
    end process;
    tmp_16_reg_571(63 downto 32) <= "00000000000000000000000000000000";
    tmp_29_reg_637(63 downto 32) <= "00000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , exitcond2_fu_246_p2 , exitcond3_fu_442_p2 , exitcond1_fu_240_p2 , exitcond_fu_418_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_240_p2))) then
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if ((exitcond2_fu_246_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st26_fsm_25 => 
                if (not((ap_const_lv1_0 = exitcond_fu_418_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st27_fsm_26;
                end if;
            when ap_ST_st27_fsm_26 => 
                if ((ap_const_lv1_0 = exitcond3_fu_442_p2)) then
                    ap_NS_fsm <= ap_ST_st28_fsm_27;
                else
                    ap_NS_fsm <= ap_ST_st26_fsm_25;
                end if;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, exitcond_fu_418_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or ((ap_ST_st26_fsm_25 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_418_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond_fu_418_p2)
    begin
        if (((ap_ST_st26_fsm_25 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_418_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_240_p2 <= "1" when (indvar3_reg_124 = ap_const_lv11_436) else "0";
    exitcond2_fu_246_p2 <= "1" when (j_reg_136 = ap_const_lv11_780) else "0";
    exitcond3_fu_442_p2 <= "1" when (indvar_reg_159 = ap_const_lv11_77E) else "0";
    exitcond_fu_418_p2 <= "1" when (i_1_reg_147 = ap_const_lv11_438) else "0";
    grp_fu_171_ce <= ap_const_logic_1;

    -- grp_fu_171_p0 assign process. --
    grp_fu_171_p0_assign_proc : process(ap_CS_fsm, reg_205, reg_216)
    begin
        if (((ap_ST_st20_fsm_19 = ap_CS_fsm) or (ap_ST_st37_fsm_36 = ap_CS_fsm))) then 
            grp_fu_171_p0 <= reg_216;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st32_fsm_31 = ap_CS_fsm))) then 
            grp_fu_171_p0 <= reg_205;
        else 
            grp_fu_171_p0 <= reg_216;
        end if; 
    end process;


    -- grp_fu_171_p1 assign process. --
    grp_fu_171_p1_assign_proc : process(ap_CS_fsm, reg_205, reg_211)
    begin
        if (((ap_ST_st20_fsm_19 = ap_CS_fsm) or (ap_ST_st37_fsm_36 = ap_CS_fsm))) then 
            grp_fu_171_p1 <= reg_205;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st32_fsm_31 = ap_CS_fsm))) then 
            grp_fu_171_p1 <= reg_211;
        else 
            grp_fu_171_p1 <= reg_211;
        end if; 
    end process;

    grp_fu_175_ce <= ap_const_logic_1;

    -- grp_fu_175_p0 assign process. --
    grp_fu_175_p0_assign_proc : process(ap_CS_fsm, tmp_q0, reg_200)
    begin
        if (((ap_ST_st28_fsm_27 = ap_CS_fsm) or (ap_ST_st33_fsm_32 = ap_CS_fsm))) then 
            grp_fu_175_p0 <= tmp_q0;
        elsif (((ap_ST_st11_fsm_10 = ap_CS_fsm) or (ap_ST_st16_fsm_15 = ap_CS_fsm))) then 
            grp_fu_175_p0 <= reg_200;
        else 
            grp_fu_175_p0 <= reg_200;
        end if; 
    end process;

    grp_fu_175_p1 <= ap_const_lv32_3E7C8F32;
    grp_fu_180_ce <= ap_const_logic_1;

    -- grp_fu_180_p0 assign process. --
    grp_fu_180_p0_assign_proc : process(ap_CS_fsm, tmp_q1, tmp_s_reg_606)
    begin
        if ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
            grp_fu_180_p0 <= tmp_q1;
        elsif ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
            grp_fu_180_p0 <= tmp_s_reg_606;
        else 
            grp_fu_180_p0 <= tmp_s_reg_606;
        end if; 
    end process;

    grp_fu_180_p1 <= ap_const_lv32_3F1B5159;
    grp_fu_187_ce <= ap_const_logic_1;
    grp_fu_187_p0 <= reg_216;
    grp_fu_190_ce <= ap_const_logic_1;

    -- grp_fu_190_p0 assign process. --
    grp_fu_190_p0_assign_proc : process(ap_CS_fsm, tmp_6_fu_404_p1, tmp_12_fu_413_p1)
    begin
        if ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then 
            grp_fu_190_p0 <= tmp_12_fu_413_p1;
        elsif ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            grp_fu_190_p0 <= tmp_6_fu_404_p1;
        else 
            grp_fu_190_p0 <= tmp_12_fu_413_p1;
        end if; 
    end process;

    grp_fu_193_ce <= ap_const_logic_1;
    grp_fu_193_p0 <= std_logic_vector(resize(unsigned(in_load_1_reg_586),64));
    i_2_fu_424_p2 <= std_logic_vector(unsigned(i_1_reg_147) + unsigned(ap_const_lv11_1));
    i_fu_234_p2 <= std_logic_vector(unsigned(indvar3_reg_124) + unsigned(ap_const_lv11_1));

    -- in_r_address0 assign process. --
    in_r_address0_assign_proc : process(ap_CS_fsm, tmp_3_fu_306_p1, tmp_25_fu_399_p1)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            in_r_address0 <= tmp_25_fu_399_p1(21 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            in_r_address0 <= tmp_3_fu_306_p1(21 - 1 downto 0);
        else 
            in_r_address0 <= tmp_25_fu_399_p1(21 - 1 downto 0);
        end if; 
    end process;

    in_r_address1 <= tmp_16_fu_353_p1(21 - 1 downto 0);

    -- in_r_ce0 assign process. --
    in_r_ce0_assign_proc : process(ap_CS_fsm, exitcond2_fu_246_p2)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and (exitcond2_fu_246_p2 = ap_const_lv1_0)))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- in_r_ce1 assign process. --
    in_r_ce1_assign_proc : process(ap_CS_fsm, exitcond2_fu_246_p2)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (exitcond2_fu_246_p2 = ap_const_lv1_0))) then 
            in_r_ce1 <= ap_const_logic_1;
        else 
            in_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_436_p2 <= std_logic_vector(unsigned(indvar_reg_159) + unsigned(ap_const_lv11_1));
    j_2_fu_252_p2 <= std_logic_vector(unsigned(j_reg_136) + unsigned(ap_const_lv11_1));
    out_r_address0 <= tmp_29_reg_637(21 - 1 downto 0);

    -- out_r_ce0 assign process. --
    out_r_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st46_fsm_45 = ap_CS_fsm)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= tmp_1_2_reg_662;

    -- out_r_we0 assign process. --
    out_r_we0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st46_fsm_45 = ap_CS_fsm))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    
    p_addr_fu_380_p2_temp <= signed(p_addr_fu_380_p2);
    p_addr1_fu_390_p0 <= std_logic_vector(resize(p_addr_fu_380_p2_temp,24));

    p_addr1_fu_390_p2 <= std_logic_vector(unsigned(p_addr1_fu_390_p0) + unsigned(tmp_5_trn5_cast_fu_258_p1));
    p_addr3_fu_333_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_318_p1) - unsigned(p_shl3_cast_fu_329_p1));
    
    p_addr3_fu_333_p2_temp <= signed(p_addr3_fu_333_p2);
    p_addr4_fu_343_p0 <= std_logic_vector(resize(p_addr3_fu_333_p2_temp,24));

    p_addr4_fu_343_p2 <= std_logic_vector(unsigned(p_addr4_fu_343_p0) + unsigned(tmp_5_trn5_cast_fu_258_p1));
    p_addr6_fu_286_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_270_p1) - unsigned(p_shl1_cast_fu_282_p1));
    
    p_addr6_fu_286_p2_temp <= signed(p_addr6_fu_286_p2);
    p_addr7_fu_296_p0 <= std_logic_vector(resize(p_addr6_fu_286_p2_temp,24));

    p_addr7_fu_296_p2 <= std_logic_vector(unsigned(p_addr7_fu_296_p0) + unsigned(tmp_5_trn5_cast_fu_258_p1));
    p_addr_fu_380_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_365_p1) - unsigned(p_shl5_cast_fu_376_p1));
    p_shl1_cast_fu_282_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_274_p3),23));
    p_shl2_cast_fu_318_p1 <= std_logic_vector(resize(unsigned(tmp_4_fu_311_p3),23));
    p_shl3_cast_fu_329_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_322_p3),23));
    p_shl4_cast_fu_365_p1 <= std_logic_vector(resize(unsigned(tmp_18_fu_358_p3),23));
    p_shl5_cast_fu_376_p1 <= std_logic_vector(resize(unsigned(tmp_21_fu_369_p3),23));
    p_shl6_cast_fu_460_p1 <= std_logic_vector(resize(unsigned(tmp_26_fu_452_p3),23));
    p_shl7_cast_fu_472_p1 <= std_logic_vector(resize(unsigned(tmp_27_fu_464_p3),23));
    p_shl_cast_fu_270_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_262_p3),23));
    tmp8_fu_430_p2 <= std_logic_vector(unsigned(indvar_reg_159) + unsigned(ap_const_lv11_2));
    tmp_12_fu_413_p1 <= std_logic_vector(resize(unsigned(reg_196),64));
    
    p_addr4_fu_343_p2_temp <= signed(p_addr4_fu_343_p2);
    tmp_16_fu_353_p0 <= std_logic_vector(resize(p_addr4_fu_343_p2_temp,32));

    tmp_16_fu_353_p1 <= std_logic_vector(resize(unsigned(tmp_16_fu_353_p0),64));
    tmp_16_trn_cast_fu_448_p1 <= std_logic_vector(resize(unsigned(indvar_reg_159),24));
    tmp_18_fu_358_p3 <= (tmp_1_1_reg_542 & ap_const_lv11_0);
    tmp_18_trn_cast_fu_501_p1 <= std_logic_vector(resize(unsigned(j_1_fu_436_p2),24));
    tmp_1_1_fu_228_p2 <= std_logic_vector(unsigned(indvar3_reg_124) + unsigned(ap_const_lv11_2));
    tmp_1_2_fu_538_p1 <= grp_fu_187_p1(16 - 1 downto 0);
    tmp_1_fu_262_p3 <= (indvar3_reg_124 & ap_const_lv11_0);
    tmp_21_fu_369_p3 <= (tmp_1_1_reg_542 & ap_const_lv7_0);
    tmp_21_trn_cast_fu_520_p1 <= std_logic_vector(resize(unsigned(tmp8_fu_430_p2),24));
    
    p_addr1_reg_581_temp <= signed(p_addr1_reg_581);
    tmp_25_fu_399_p0 <= std_logic_vector(resize(p_addr1_reg_581_temp,32));

    tmp_25_fu_399_p1 <= std_logic_vector(resize(unsigned(tmp_25_fu_399_p0),64));
    tmp_26_fu_452_p3 <= (i_1_reg_147 & ap_const_lv11_0);
    tmp_27_fu_464_p3 <= (i_1_reg_147 & ap_const_lv7_0);
    
    tmp_addr2_fu_486_p2_temp <= signed(tmp_addr2_fu_486_p2);
    tmp_28_fu_496_p0 <= std_logic_vector(resize(tmp_addr2_fu_486_p2_temp,32));

    tmp_28_fu_496_p1 <= std_logic_vector(resize(unsigned(tmp_28_fu_496_p0),64));
    
    tmp_addr3_fu_505_p2_temp <= signed(tmp_addr3_fu_505_p2);
    tmp_29_fu_515_p0 <= std_logic_vector(resize(tmp_addr3_fu_505_p2_temp,32));

    tmp_29_fu_515_p1 <= std_logic_vector(resize(unsigned(tmp_29_fu_515_p0),64));
    tmp_2_fu_274_p3 <= (indvar3_reg_124 & ap_const_lv7_0);
    
    tmp_addr4_reg_647_temp <= signed(tmp_addr4_reg_647);
    tmp_30_fu_533_p0 <= std_logic_vector(resize(tmp_addr4_reg_647_temp,32));

    tmp_30_fu_533_p1 <= std_logic_vector(resize(unsigned(tmp_30_fu_533_p0),64));
    
    p_addr7_fu_296_p2_temp <= signed(p_addr7_fu_296_p2);
    tmp_3_fu_306_p0 <= std_logic_vector(resize(p_addr7_fu_296_p2_temp,32));

    tmp_3_fu_306_p1 <= std_logic_vector(resize(unsigned(tmp_3_fu_306_p0),64));
    tmp_4_fu_311_p3 <= (i_reg_548 & ap_const_lv11_0);
    tmp_5_fu_322_p3 <= (i_reg_548 & ap_const_lv7_0);
    tmp_5_trn5_cast_fu_258_p1 <= std_logic_vector(resize(unsigned(j_reg_136),24));
    tmp_6_fu_404_p1 <= std_logic_vector(resize(unsigned(reg_196),64));
    
    tmp_addr1_fu_476_p2_temp <= signed(tmp_addr1_fu_476_p2);
    tmp_addr1_cast_fu_482_p1 <= std_logic_vector(resize(tmp_addr1_fu_476_p2_temp,24));

    tmp_addr1_fu_476_p2 <= std_logic_vector(unsigned(p_shl6_cast_fu_460_p1) - unsigned(p_shl7_cast_fu_472_p1));
    tmp_addr2_fu_486_p0 <= tmp_addr1_cast_fu_482_p1;
    tmp_addr2_fu_486_p2 <= std_logic_vector(unsigned(tmp_addr2_fu_486_p0) + unsigned(tmp_16_trn_cast_fu_448_p1));
    tmp_addr3_fu_505_p0 <= tmp_addr1_cast_fu_482_p1;
    tmp_addr3_fu_505_p2 <= std_logic_vector(unsigned(tmp_addr3_fu_505_p0) + unsigned(tmp_18_trn_cast_fu_501_p1));
    tmp_addr4_fu_524_p0 <= tmp_addr1_cast_fu_482_p1;
    tmp_addr4_fu_524_p2 <= std_logic_vector(unsigned(tmp_addr4_fu_524_p0) + unsigned(tmp_21_trn_cast_fu_520_p1));

    -- tmp_address0 assign process. --
    tmp_address0_assign_proc : process(ap_CS_fsm, tmp_16_reg_571, tmp_28_fu_496_p1, tmp_30_fu_533_p1)
    begin
        if ((ap_ST_st25_fsm_24 = ap_CS_fsm)) then 
            tmp_address0 <= tmp_16_reg_571(21 - 1 downto 0);
        elsif ((ap_ST_st32_fsm_31 = ap_CS_fsm)) then 
            tmp_address0 <= tmp_30_fu_533_p1(21 - 1 downto 0);
        elsif ((ap_ST_st27_fsm_26 = ap_CS_fsm)) then 
            tmp_address0 <= tmp_28_fu_496_p1(21 - 1 downto 0);
        else 
            tmp_address0 <= tmp_16_reg_571(21 - 1 downto 0);
        end if; 
    end process;

    tmp_address1 <= tmp_29_fu_515_p1(21 - 1 downto 0);

    -- tmp_ce0 assign process. --
    tmp_ce0_assign_proc : process(ap_CS_fsm, exitcond3_fu_442_p2)
    begin
        if ((((ap_ST_st27_fsm_26 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond3_fu_442_p2)) or (ap_ST_st32_fsm_31 = ap_CS_fsm) or (ap_ST_st25_fsm_24 = ap_CS_fsm))) then 
            tmp_ce0 <= ap_const_logic_1;
        else 
            tmp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- tmp_ce1 assign process. --
    tmp_ce1_assign_proc : process(ap_CS_fsm, exitcond3_fu_442_p2)
    begin
        if (((ap_ST_st27_fsm_26 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond3_fu_442_p2))) then 
            tmp_ce1 <= ap_const_logic_1;
        else 
            tmp_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_d0 <= reg_216;

    -- tmp_we0 assign process. --
    tmp_we0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st25_fsm_24 = ap_CS_fsm))) then 
            tmp_we0 <= ap_const_logic_1;
        else 
            tmp_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
