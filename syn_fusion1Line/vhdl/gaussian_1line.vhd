-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.2
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gaussian_1line is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_r_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_r_address1 : OUT STD_LOGIC_VECTOR (20 downto 0);
    in_r_ce1 : OUT STD_LOGIC;
    in_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (20 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of gaussian_1line is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (5 downto 0) := "100101";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (5 downto 0) := "100111";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (5 downto 0) := "101001";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (5 downto 0) := "101101";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (5 downto 0) := "110011";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (5 downto 0) := "110100";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (5 downto 0) := "110101";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (5 downto 0) := "110110";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (5 downto 0) := "110111";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (5 downto 0) := "111010";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (5 downto 0) := "111011";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_3E7C8F32 : STD_LOGIC_VECTOR (31 downto 0) := "00111110011111001000111100110010";
    constant ap_const_lv32_3F1B5159 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000110110101000101011001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_437 : STD_LOGIC_VECTOR (10 downto 0) := "10000110111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_77E : STD_LOGIC_VECTOR (10 downto 0) := "11101111110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal tmp_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_ce0 : STD_LOGIC;
    signal tmp_we0 : STD_LOGIC;
    signal tmp_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_ce1 : STD_LOGIC;
    signal tmp_we1 : STD_LOGIC;
    signal tmp_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_242 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_246 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_255 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_204_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_280 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_fu_286_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_1_reg_646 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_fu_292_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_reg_652 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_addr_fu_328_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_addr_reg_660 : STD_LOGIC_VECTOR (22 downto 0);
    signal exitcond_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr2_fu_367_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_addr2_reg_670 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_1_2_reg_680 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_53_reg_685 : STD_LOGIC_VECTOR (21 downto 0);
    signal in_load_3_reg_700 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_load_4_reg_705 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_addr3_fu_474_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_addr3_reg_730 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_s_fu_516_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_236_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_755 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_521_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_765 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_770 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr_cast1_fu_526_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_addr_reg_660_temp: signed (23-1 downto 0);
    signal p_addr_cast1_reg_775 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_addr2_cast1_fu_529_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_addr2_reg_670_temp: signed (23-1 downto 0);
    signal p_addr2_cast1_reg_780 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_addr3_cast1_fu_532_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_addr3_reg_730_temp: signed (23-1 downto 0);
    signal p_addr3_cast1_reg_786 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp6_fu_535_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp6_reg_791 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_fu_541_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_reg_798 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond1_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_addr1_fu_585_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_addr1_reg_816 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_25_fu_598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_603_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_608_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_addr9_fu_625_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_addr9_reg_851 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_37_reg_866 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_fu_634_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_63_reg_871 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar1_reg_172 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_reg_183 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_44_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_fu_413_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_55_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_36_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_38_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_62_fu_641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_196_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_196_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_200_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_204_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_204_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_209_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_214_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_214_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_227_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_230_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_233_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_236_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_239_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_304_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_5_fu_316_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl_cast_fu_312_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl1_cast_fu_324_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_44_fu_338_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr_fu_328_p2_temp: signed (23-1 downto 0);
    signal tmp_45_fu_343_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_46_fu_355_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl2_cast_fu_351_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl3_cast_fu_363_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_47_fu_377_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr2_fu_367_p2_temp: signed (23-1 downto 0);
    signal tmp_51_fu_402_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_52_fu_413_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_fu_402_p3_temp: signed (23-1 downto 0);
    signal tmp_54_fu_418_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_55_fu_429_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_fu_418_p3_temp: signed (23-1 downto 0);
    signal tmp_48_fu_452_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_49_fu_463_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_shl4_cast_fu_459_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_shl5_cast_fu_470_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_50_fu_484_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr3_fu_474_p2_temp: signed (23-1 downto 0);
    signal tmp_56_fu_489_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_57_fu_499_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_58_fu_511_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_fu_499_p3_temp: signed (23-1 downto 0);
    signal tmp_25_trn5_cast_fu_553_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_addr7_fu_557_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_59_fu_566_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr7_fu_557_p2_temp: signed (24-1 downto 0);
    signal p_addr4_fu_571_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_60_fu_580_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr4_fu_571_p2_temp: signed (24-1 downto 0);
    signal tmp_61_fu_593_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr1_reg_816_temp: signed (24-1 downto 0);
    signal tmp_39_trn_cast_fu_622_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_227_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_62_fu_641_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_addr9_reg_851_temp: signed (24-1 downto 0);
    signal grp_fu_196_ce : STD_LOGIC;
    signal grp_fu_200_ce : STD_LOGIC;
    signal grp_fu_204_ce : STD_LOGIC;
    signal grp_fu_209_ce : STD_LOGIC;
    signal grp_fu_214_ce : STD_LOGIC;
    signal grp_fu_219_ce : STD_LOGIC;
    signal grp_fu_227_ce : STD_LOGIC;
    signal grp_fu_230_ce : STD_LOGIC;
    signal grp_fu_233_ce : STD_LOGIC;
    signal grp_fu_236_ce : STD_LOGIC;
    signal grp_fu_239_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component gaussian_fadd_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gaussian_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gaussian_fptoui_32ns_64_4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component gaussian_sitofp_64ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gaussian_1line_tmp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    tmp_U : component gaussian_1line_tmp
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => tmp_address0,
        ce0 => tmp_ce0,
        we0 => tmp_we0,
        d0 => tmp_d0,
        q0 => tmp_q0,
        address1 => tmp_address1,
        ce1 => tmp_ce1,
        we1 => tmp_we1,
        d1 => tmp_d1,
        q1 => tmp_q1);

    gaussian_fadd_32ns_32ns_32_5_full_dsp_U1 : component gaussian_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_196_p0,
        din1 => grp_fu_196_p1,
        ce => grp_fu_196_ce,
        dout => grp_fu_196_p2);

    gaussian_fadd_32ns_32ns_32_5_full_dsp_U2 : component gaussian_fadd_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 2,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_200_p0,
        din1 => grp_fu_200_p1,
        ce => grp_fu_200_ce,
        dout => grp_fu_200_p2);

    gaussian_fmul_32ns_32ns_32_4_max_dsp_U3 : component gaussian_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 3,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_204_p0,
        din1 => grp_fu_204_p1,
        ce => grp_fu_204_ce,
        dout => grp_fu_204_p2);

    gaussian_fmul_32ns_32ns_32_4_max_dsp_U4 : component gaussian_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 4,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_209_p0,
        din1 => grp_fu_209_p1,
        ce => grp_fu_209_ce,
        dout => grp_fu_209_p2);

    gaussian_fmul_32ns_32ns_32_4_max_dsp_U5 : component gaussian_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 5,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_214_p0,
        din1 => grp_fu_214_p1,
        ce => grp_fu_214_ce,
        dout => grp_fu_214_p2);

    gaussian_fmul_32ns_32ns_32_4_max_dsp_U6 : component gaussian_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 6,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_219_p0,
        din1 => grp_fu_219_p1,
        ce => grp_fu_219_ce,
        dout => grp_fu_219_p2);

    gaussian_fptoui_32ns_64_4_U7 : component gaussian_fptoui_32ns_64_4
    generic map (
        ID => 7,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_227_p0,
        ce => grp_fu_227_ce,
        dout => grp_fu_227_p1);

    gaussian_sitofp_64ns_32_6_U8 : component gaussian_sitofp_64ns_32_6
    generic map (
        ID => 8,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_230_p0,
        ce => grp_fu_230_ce,
        dout => grp_fu_230_p1);

    gaussian_sitofp_64ns_32_6_U9 : component gaussian_sitofp_64ns_32_6
    generic map (
        ID => 9,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_233_p0,
        ce => grp_fu_233_ce,
        dout => grp_fu_233_p1);

    gaussian_sitofp_64ns_32_6_U10 : component gaussian_sitofp_64ns_32_6
    generic map (
        ID => 10,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_236_p0,
        ce => grp_fu_236_ce,
        dout => grp_fu_236_p1);

    gaussian_sitofp_64ns_32_6_U11 : component gaussian_sitofp_64ns_32_6
    generic map (
        ID => 11,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_239_p0,
        ce => grp_fu_239_ce,
        dout => grp_fu_239_p1);




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- indvar1_reg_172 assign process. --
    indvar1_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st26_fsm_25 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond1_fu_547_p2)))) then 
                indvar1_reg_172 <= i_reg_652;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                indvar1_reg_172 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    -- indvar_reg_183 assign process. --
    indvar_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st25_fsm_24 = ap_CS_fsm)) then 
                indvar_reg_183 <= ap_const_lv11_0;
            elsif ((ap_ST_st61_fsm_60 = ap_CS_fsm)) then 
                indvar_reg_183 <= tmp6_reg_791;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                i_reg_652 <= i_fu_292_p2;
                tmp_1_1_reg_646 <= tmp_1_1_fu_286_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then
                in_load_3_reg_700 <= in_r_q0;
                in_load_4_reg_705 <= in_r_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st26_fsm_25 = ap_CS_fsm)) then
                j_reg_798 <= j_fu_541_p2;
                tmp6_reg_791 <= tmp6_fu_535_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st26_fsm_25 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_547_p2))) then
                p_addr1_reg_816 <= p_addr1_fu_585_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st25_fsm_24 = ap_CS_fsm)) then
                p_addr2_cast1_reg_780(7) <= p_addr2_cast1_fu_529_p1(7);
    p_addr2_cast1_reg_780(8) <= p_addr2_cast1_fu_529_p1(8);
    p_addr2_cast1_reg_780(9) <= p_addr2_cast1_fu_529_p1(9);
    p_addr2_cast1_reg_780(10) <= p_addr2_cast1_fu_529_p1(10);
    p_addr2_cast1_reg_780(11) <= p_addr2_cast1_fu_529_p1(11);
    p_addr2_cast1_reg_780(12) <= p_addr2_cast1_fu_529_p1(12);
    p_addr2_cast1_reg_780(13) <= p_addr2_cast1_fu_529_p1(13);
    p_addr2_cast1_reg_780(14) <= p_addr2_cast1_fu_529_p1(14);
    p_addr2_cast1_reg_780(15) <= p_addr2_cast1_fu_529_p1(15);
    p_addr2_cast1_reg_780(16) <= p_addr2_cast1_fu_529_p1(16);
    p_addr2_cast1_reg_780(17) <= p_addr2_cast1_fu_529_p1(17);
    p_addr2_cast1_reg_780(18) <= p_addr2_cast1_fu_529_p1(18);
    p_addr2_cast1_reg_780(19) <= p_addr2_cast1_fu_529_p1(19);
    p_addr2_cast1_reg_780(20) <= p_addr2_cast1_fu_529_p1(20);
    p_addr2_cast1_reg_780(21) <= p_addr2_cast1_fu_529_p1(21);
    p_addr2_cast1_reg_780(22) <= p_addr2_cast1_fu_529_p1(22);
    p_addr2_cast1_reg_780(23) <= p_addr2_cast1_fu_529_p1(23);
                p_addr3_cast1_reg_786(7) <= p_addr3_cast1_fu_532_p1(7);
    p_addr3_cast1_reg_786(8) <= p_addr3_cast1_fu_532_p1(8);
    p_addr3_cast1_reg_786(9) <= p_addr3_cast1_fu_532_p1(9);
    p_addr3_cast1_reg_786(10) <= p_addr3_cast1_fu_532_p1(10);
    p_addr3_cast1_reg_786(11) <= p_addr3_cast1_fu_532_p1(11);
    p_addr3_cast1_reg_786(12) <= p_addr3_cast1_fu_532_p1(12);
    p_addr3_cast1_reg_786(13) <= p_addr3_cast1_fu_532_p1(13);
    p_addr3_cast1_reg_786(14) <= p_addr3_cast1_fu_532_p1(14);
    p_addr3_cast1_reg_786(15) <= p_addr3_cast1_fu_532_p1(15);
    p_addr3_cast1_reg_786(16) <= p_addr3_cast1_fu_532_p1(16);
    p_addr3_cast1_reg_786(17) <= p_addr3_cast1_fu_532_p1(17);
    p_addr3_cast1_reg_786(18) <= p_addr3_cast1_fu_532_p1(18);
    p_addr3_cast1_reg_786(19) <= p_addr3_cast1_fu_532_p1(19);
    p_addr3_cast1_reg_786(20) <= p_addr3_cast1_fu_532_p1(20);
    p_addr3_cast1_reg_786(21) <= p_addr3_cast1_fu_532_p1(21);
    p_addr3_cast1_reg_786(22) <= p_addr3_cast1_fu_532_p1(22);
    p_addr3_cast1_reg_786(23) <= p_addr3_cast1_fu_532_p1(23);
                p_addr_cast1_reg_775(7) <= p_addr_cast1_fu_526_p1(7);
    p_addr_cast1_reg_775(8) <= p_addr_cast1_fu_526_p1(8);
    p_addr_cast1_reg_775(9) <= p_addr_cast1_fu_526_p1(9);
    p_addr_cast1_reg_775(10) <= p_addr_cast1_fu_526_p1(10);
    p_addr_cast1_reg_775(11) <= p_addr_cast1_fu_526_p1(11);
    p_addr_cast1_reg_775(12) <= p_addr_cast1_fu_526_p1(12);
    p_addr_cast1_reg_775(13) <= p_addr_cast1_fu_526_p1(13);
    p_addr_cast1_reg_775(14) <= p_addr_cast1_fu_526_p1(14);
    p_addr_cast1_reg_775(15) <= p_addr_cast1_fu_526_p1(15);
    p_addr_cast1_reg_775(16) <= p_addr_cast1_fu_526_p1(16);
    p_addr_cast1_reg_775(17) <= p_addr_cast1_fu_526_p1(17);
    p_addr_cast1_reg_775(18) <= p_addr_cast1_fu_526_p1(18);
    p_addr_cast1_reg_775(19) <= p_addr_cast1_fu_526_p1(19);
    p_addr_cast1_reg_775(20) <= p_addr_cast1_fu_526_p1(20);
    p_addr_cast1_reg_775(21) <= p_addr_cast1_fu_526_p1(21);
    p_addr_cast1_reg_775(22) <= p_addr_cast1_fu_526_p1(22);
    p_addr_cast1_reg_775(23) <= p_addr_cast1_fu_526_p1(23);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond_fu_298_p2 = ap_const_lv1_0))) then
                p_addr2_reg_670(7) <= p_addr2_fu_367_p2(7);
    p_addr2_reg_670(8) <= p_addr2_fu_367_p2(8);
    p_addr2_reg_670(9) <= p_addr2_fu_367_p2(9);
    p_addr2_reg_670(10) <= p_addr2_fu_367_p2(10);
    p_addr2_reg_670(11) <= p_addr2_fu_367_p2(11);
    p_addr2_reg_670(12) <= p_addr2_fu_367_p2(12);
    p_addr2_reg_670(13) <= p_addr2_fu_367_p2(13);
    p_addr2_reg_670(14) <= p_addr2_fu_367_p2(14);
    p_addr2_reg_670(15) <= p_addr2_fu_367_p2(15);
    p_addr2_reg_670(16) <= p_addr2_fu_367_p2(16);
    p_addr2_reg_670(17) <= p_addr2_fu_367_p2(17);
    p_addr2_reg_670(18) <= p_addr2_fu_367_p2(18);
    p_addr2_reg_670(19) <= p_addr2_fu_367_p2(19);
    p_addr2_reg_670(20) <= p_addr2_fu_367_p2(20);
    p_addr2_reg_670(21) <= p_addr2_fu_367_p2(21);
    p_addr2_reg_670(22) <= p_addr2_fu_367_p2(22);
                p_addr_reg_660(7) <= p_addr_fu_328_p2(7);
    p_addr_reg_660(8) <= p_addr_fu_328_p2(8);
    p_addr_reg_660(9) <= p_addr_fu_328_p2(9);
    p_addr_reg_660(10) <= p_addr_fu_328_p2(10);
    p_addr_reg_660(11) <= p_addr_fu_328_p2(11);
    p_addr_reg_660(12) <= p_addr_fu_328_p2(12);
    p_addr_reg_660(13) <= p_addr_fu_328_p2(13);
    p_addr_reg_660(14) <= p_addr_fu_328_p2(14);
    p_addr_reg_660(15) <= p_addr_fu_328_p2(15);
    p_addr_reg_660(16) <= p_addr_fu_328_p2(16);
    p_addr_reg_660(17) <= p_addr_fu_328_p2(17);
    p_addr_reg_660(18) <= p_addr_fu_328_p2(18);
    p_addr_reg_660(19) <= p_addr_fu_328_p2(19);
    p_addr_reg_660(20) <= p_addr_fu_328_p2(20);
    p_addr_reg_660(21) <= p_addr_fu_328_p2(21);
    p_addr_reg_660(22) <= p_addr_fu_328_p2(22);
                tmp_1_2_reg_680 <= p_addr_fu_328_p2(22 downto 1);
                tmp_53_reg_685 <= p_addr2_fu_367_p2(22 downto 1);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then
                p_addr3_reg_730(7) <= p_addr3_fu_474_p2(7);
    p_addr3_reg_730(8) <= p_addr3_fu_474_p2(8);
    p_addr3_reg_730(9) <= p_addr3_fu_474_p2(9);
    p_addr3_reg_730(10) <= p_addr3_fu_474_p2(10);
    p_addr3_reg_730(11) <= p_addr3_fu_474_p2(11);
    p_addr3_reg_730(12) <= p_addr3_fu_474_p2(12);
    p_addr3_reg_730(13) <= p_addr3_fu_474_p2(13);
    p_addr3_reg_730(14) <= p_addr3_fu_474_p2(14);
    p_addr3_reg_730(15) <= p_addr3_fu_474_p2(15);
    p_addr3_reg_730(16) <= p_addr3_fu_474_p2(16);
    p_addr3_reg_730(17) <= p_addr3_fu_474_p2(17);
    p_addr3_reg_730(18) <= p_addr3_fu_474_p2(18);
    p_addr3_reg_730(19) <= p_addr3_fu_474_p2(19);
    p_addr3_reg_730(20) <= p_addr3_fu_474_p2(20);
    p_addr3_reg_730(21) <= p_addr3_fu_474_p2(21);
    p_addr3_reg_730(22) <= p_addr3_fu_474_p2(22);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st42_fsm_41 = ap_CS_fsm)) then
                p_addr9_reg_851 <= p_addr9_fu_625_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm) or (ap_ST_st27_fsm_26 = ap_CS_fsm) or (ap_ST_st28_fsm_27 = ap_CS_fsm))) then
                reg_242 <= in_r_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm) or (ap_ST_st27_fsm_26 = ap_CS_fsm))) then
                reg_246 <= in_r_q1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st10_fsm_9 = ap_CS_fsm) or (ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st33_fsm_32 = ap_CS_fsm) or (ap_ST_st38_fsm_37 = ap_CS_fsm))) then
                reg_250 <= grp_fu_230_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st10_fsm_9 = ap_CS_fsm) or (ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st33_fsm_32 = ap_CS_fsm))) then
                reg_255 <= grp_fu_233_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st14_fsm_13 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm) or (ap_ST_st37_fsm_36 = ap_CS_fsm) or (ap_ST_st42_fsm_41 = ap_CS_fsm) or (ap_ST_st51_fsm_50 = ap_CS_fsm))) then
                reg_260 <= grp_fu_204_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st14_fsm_13 = ap_CS_fsm) or (ap_ST_st19_fsm_18 = ap_CS_fsm) or (ap_ST_st37_fsm_36 = ap_CS_fsm) or (ap_ST_st46_fsm_45 = ap_CS_fsm))) then
                reg_266 <= grp_fu_209_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st19_fsm_18 = ap_CS_fsm) or (ap_ST_st42_fsm_41 = ap_CS_fsm) or (ap_ST_st51_fsm_50 = ap_CS_fsm) or (ap_ST_st24_fsm_23 = ap_CS_fsm) or (ap_ST_st47_fsm_46 = ap_CS_fsm) or (ap_ST_st56_fsm_55 = ap_CS_fsm))) then
                reg_272 <= grp_fu_196_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st19_fsm_18 = ap_CS_fsm) or (ap_ST_st24_fsm_23 = ap_CS_fsm))) then
                reg_280 <= grp_fu_200_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then
                tmp_14_reg_750 <= grp_fu_236_p1;
                tmp_17_reg_755 <= grp_fu_239_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st14_fsm_13 = ap_CS_fsm)) then
                tmp_15_reg_765 <= grp_fu_214_p2;
                tmp_18_reg_770 <= grp_fu_219_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st46_fsm_45 = ap_CS_fsm)) then
                tmp_37_reg_866 <= grp_fu_204_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st60_fsm_59 = ap_CS_fsm)) then
                tmp_63_reg_871 <= tmp_63_fu_634_p1;
            end if;
        end if;
    end process;
    p_addr_reg_660(6 downto 0) <= "0000000";
    p_addr2_reg_670(6 downto 0) <= "0000000";
    p_addr3_reg_730(6 downto 0) <= "0000000";
    p_addr_cast1_reg_775(6 downto 0) <= "0000000";
    p_addr2_cast1_reg_780(6 downto 0) <= "0000000";
    p_addr3_cast1_reg_786(6 downto 0) <= "0000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , exitcond_fu_298_p2 , exitcond1_fu_547_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((exitcond_fu_298_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                if ((ap_const_lv1_0 = exitcond1_fu_547_p2)) then
                    ap_NS_fsm <= ap_ST_st27_fsm_26;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                ap_NS_fsm <= ap_ST_st54_fsm_53;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, exitcond_fu_298_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond_fu_298_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond_fu_298_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((exitcond_fu_298_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_547_p2 <= "1" when (indvar_reg_183 = ap_const_lv11_77E) else "0";
    exitcond_fu_298_p2 <= "1" when (indvar1_reg_172 = ap_const_lv11_437) else "0";
    grp_fu_196_ce <= ap_const_logic_1;

    -- grp_fu_196_p0 assign process. --
    grp_fu_196_p0_assign_proc : process(ap_CS_fsm, reg_260, reg_272, tmp_37_reg_866)
    begin
        if ((ap_ST_st47_fsm_46 = ap_CS_fsm)) then 
            grp_fu_196_p0 <= tmp_37_reg_866;
        elsif (((ap_ST_st43_fsm_42 = ap_CS_fsm) or (ap_ST_st20_fsm_19 = ap_CS_fsm) or (ap_ST_st52_fsm_51 = ap_CS_fsm))) then 
            grp_fu_196_p0 <= reg_272;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st38_fsm_37 = ap_CS_fsm))) then 
            grp_fu_196_p0 <= reg_260;
        else 
            grp_fu_196_p0 <= tmp_37_reg_866;
        end if; 
    end process;


    -- grp_fu_196_p1 assign process. --
    grp_fu_196_p1_assign_proc : process(ap_CS_fsm, reg_260, reg_266)
    begin
        if (((ap_ST_st43_fsm_42 = ap_CS_fsm) or (ap_ST_st20_fsm_19 = ap_CS_fsm) or (ap_ST_st52_fsm_51 = ap_CS_fsm))) then 
            grp_fu_196_p1 <= reg_260;
        elsif (((ap_ST_st15_fsm_14 = ap_CS_fsm) or (ap_ST_st38_fsm_37 = ap_CS_fsm) or (ap_ST_st47_fsm_46 = ap_CS_fsm))) then 
            grp_fu_196_p1 <= reg_266;
        else 
            grp_fu_196_p1 <= reg_266;
        end if; 
    end process;

    grp_fu_200_ce <= ap_const_logic_1;

    -- grp_fu_200_p0 assign process. --
    grp_fu_200_p0_assign_proc : process(ap_CS_fsm, reg_280, tmp_15_reg_765)
    begin
        if ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            grp_fu_200_p0 <= reg_280;
        elsif ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
            grp_fu_200_p0 <= tmp_15_reg_765;
        else 
            grp_fu_200_p0 <= tmp_15_reg_765;
        end if; 
    end process;


    -- grp_fu_200_p1 assign process. --
    grp_fu_200_p1_assign_proc : process(ap_CS_fsm, reg_266, tmp_18_reg_770)
    begin
        if ((ap_ST_st20_fsm_19 = ap_CS_fsm)) then 
            grp_fu_200_p1 <= reg_266;
        elsif ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
            grp_fu_200_p1 <= tmp_18_reg_770;
        else 
            grp_fu_200_p1 <= tmp_18_reg_770;
        end if; 
    end process;

    grp_fu_204_ce <= ap_const_logic_1;

    -- grp_fu_204_p0 assign process. --
    grp_fu_204_p0_assign_proc : process(ap_CS_fsm, tmp_q0, reg_250, reg_272)
    begin
        if ((ap_ST_st48_fsm_47 = ap_CS_fsm)) then 
            grp_fu_204_p0 <= reg_272;
        elsif ((ap_ST_st43_fsm_42 = ap_CS_fsm)) then 
            grp_fu_204_p0 <= tmp_q0;
        elsif (((ap_ST_st11_fsm_10 = ap_CS_fsm) or (ap_ST_st16_fsm_15 = ap_CS_fsm) or (ap_ST_st34_fsm_33 = ap_CS_fsm) or (ap_ST_st39_fsm_38 = ap_CS_fsm))) then 
            grp_fu_204_p0 <= reg_250;
        else 
            grp_fu_204_p0 <= reg_272;
        end if; 
    end process;

    grp_fu_204_p1 <= ap_const_lv32_3E7C8F32;
    grp_fu_209_ce <= ap_const_logic_1;

    -- grp_fu_209_p0 assign process. --
    grp_fu_209_p0_assign_proc : process(ap_CS_fsm, tmp_q1, reg_255)
    begin
        if ((ap_ST_st43_fsm_42 = ap_CS_fsm)) then 
            grp_fu_209_p0 <= tmp_q1;
        elsif (((ap_ST_st11_fsm_10 = ap_CS_fsm) or (ap_ST_st16_fsm_15 = ap_CS_fsm) or (ap_ST_st34_fsm_33 = ap_CS_fsm))) then 
            grp_fu_209_p0 <= reg_255;
        else 
            grp_fu_209_p0 <= reg_255;
        end if; 
    end process;


    -- grp_fu_209_p1 assign process. --
    grp_fu_209_p1_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st16_fsm_15 = ap_CS_fsm)) then 
            grp_fu_209_p1 <= ap_const_lv32_3E7C8F32;
        elsif (((ap_ST_st43_fsm_42 = ap_CS_fsm) or (ap_ST_st11_fsm_10 = ap_CS_fsm) or (ap_ST_st34_fsm_33 = ap_CS_fsm))) then 
            grp_fu_209_p1 <= ap_const_lv32_3F1B5159;
        else 
            grp_fu_209_p1 <= ap_const_lv32_3F1B5159;
        end if; 
    end process;

    grp_fu_214_ce <= ap_const_logic_1;
    grp_fu_214_p0 <= tmp_14_reg_750;
    grp_fu_214_p1 <= ap_const_lv32_3E7C8F32;
    grp_fu_219_ce <= ap_const_logic_1;
    grp_fu_219_p0 <= tmp_17_reg_755;
    grp_fu_219_p1 <= ap_const_lv32_3F1B5159;
    grp_fu_227_ce <= ap_const_logic_1;
    grp_fu_227_p0 <= reg_272;
    grp_fu_230_ce <= ap_const_logic_1;

    -- grp_fu_230_p0 assign process. --
    grp_fu_230_p0_assign_proc : process(ap_CS_fsm, tmp_2_fu_434_p1, tmp_s_fu_516_p1, tmp_25_fu_598_p1, tmp_32_fu_608_p1)
    begin
        if ((ap_ST_st33_fsm_32 = ap_CS_fsm)) then 
            grp_fu_230_p0 <= tmp_32_fu_608_p1;
        elsif ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
            grp_fu_230_p0 <= tmp_25_fu_598_p1;
        elsif ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then 
            grp_fu_230_p0 <= tmp_s_fu_516_p1;
        elsif ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            grp_fu_230_p0 <= tmp_2_fu_434_p1;
        else 
            grp_fu_230_p0 <= tmp_32_fu_608_p1;
        end if; 
    end process;

    grp_fu_233_ce <= ap_const_logic_1;

    -- grp_fu_233_p0 assign process. --
    grp_fu_233_p0_assign_proc : process(ap_CS_fsm, tmp_6_fu_439_p1, tmp_20_fu_521_p1, tmp_28_fu_603_p1)
    begin
        if ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
            grp_fu_233_p0 <= tmp_28_fu_603_p1;
        elsif ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then 
            grp_fu_233_p0 <= tmp_20_fu_521_p1;
        elsif ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then 
            grp_fu_233_p0 <= tmp_6_fu_439_p1;
        else 
            grp_fu_233_p0 <= tmp_28_fu_603_p1;
        end if; 
    end process;

    grp_fu_236_ce <= ap_const_logic_1;
    grp_fu_236_p0 <= std_logic_vector(resize(unsigned(in_load_3_reg_700),64));
    grp_fu_239_ce <= ap_const_logic_1;
    grp_fu_239_p0 <= std_logic_vector(resize(unsigned(in_load_4_reg_705),64));
    i_fu_292_p2 <= std_logic_vector(unsigned(indvar1_reg_172) + unsigned(ap_const_lv11_1));

    -- in_r_address0 assign process. --
    in_r_address0_assign_proc : process(ap_CS_fsm, tmp_44_fu_338_p1, tmp_52_fu_413_p1, tmp_50_fu_484_p1, tmp_59_fu_566_p1, tmp_61_fu_593_p1)
    begin
        if ((ap_ST_st27_fsm_26 = ap_CS_fsm)) then 
            in_r_address0 <= tmp_61_fu_593_p1(21 - 1 downto 0);
        elsif ((ap_ST_st26_fsm_25 = ap_CS_fsm)) then 
            in_r_address0 <= tmp_59_fu_566_p1(21 - 1 downto 0);
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            in_r_address0 <= tmp_50_fu_484_p1(21 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            in_r_address0 <= tmp_52_fu_413_p1(21 - 1 downto 0);
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            in_r_address0 <= tmp_44_fu_338_p1(21 - 1 downto 0);
        else 
            in_r_address0 <= tmp_61_fu_593_p1(21 - 1 downto 0);
        end if; 
    end process;


    -- in_r_address1 assign process. --
    in_r_address1_assign_proc : process(ap_CS_fsm, tmp_47_fu_377_p1, tmp_55_fu_429_p1, tmp_58_fu_511_p1, tmp_60_fu_580_p1)
    begin
        if ((ap_ST_st26_fsm_25 = ap_CS_fsm)) then 
            in_r_address1 <= tmp_60_fu_580_p1(21 - 1 downto 0);
        elsif ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
            in_r_address1 <= tmp_58_fu_511_p1(21 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            in_r_address1 <= tmp_55_fu_429_p1(21 - 1 downto 0);
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            in_r_address1 <= tmp_47_fu_377_p1(21 - 1 downto 0);
        else 
            in_r_address1 <= tmp_60_fu_580_p1(21 - 1 downto 0);
        end if; 
    end process;


    -- in_r_ce0 assign process. --
    in_r_ce0_assign_proc : process(ap_CS_fsm, exitcond_fu_298_p2, exitcond1_fu_547_p2)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st27_fsm_26 = ap_CS_fsm) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond_fu_298_p2 = ap_const_lv1_0)) or (ap_ST_st8_fsm_7 = ap_CS_fsm) or ((ap_ST_st26_fsm_25 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_547_p2)))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- in_r_ce1 assign process. --
    in_r_ce1_assign_proc : process(ap_CS_fsm, exitcond_fu_298_p2, exitcond1_fu_547_p2)
    begin
        if (((ap_ST_st3_fsm_2 = ap_CS_fsm) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and (exitcond_fu_298_p2 = ap_const_lv1_0)) or (ap_ST_st8_fsm_7 = ap_CS_fsm) or ((ap_ST_st26_fsm_25 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_547_p2)))) then 
            in_r_ce1 <= ap_const_logic_1;
        else 
            in_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_541_p2 <= std_logic_vector(unsigned(indvar_reg_183) + unsigned(ap_const_lv11_2));
    out_r_address0 <= tmp_62_fu_641_p1(21 - 1 downto 0);

    -- out_r_ce0 assign process. --
    out_r_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st61_fsm_60 = ap_CS_fsm)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= tmp_63_reg_871;

    -- out_r_we0 assign process. --
    out_r_we0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st61_fsm_60 = ap_CS_fsm))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_addr1_fu_585_p2 <= std_logic_vector(unsigned(p_addr3_cast1_reg_786) + unsigned(tmp_25_trn5_cast_fu_553_p1));
    
    p_addr2_reg_670_temp <= signed(p_addr2_reg_670);
    p_addr2_cast1_fu_529_p1 <= std_logic_vector(resize(p_addr2_reg_670_temp,24));

    p_addr2_fu_367_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_351_p1) - unsigned(p_shl3_cast_fu_363_p1));
    
    p_addr3_reg_730_temp <= signed(p_addr3_reg_730);
    p_addr3_cast1_fu_532_p1 <= std_logic_vector(resize(p_addr3_reg_730_temp,24));

    p_addr3_fu_474_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_459_p1) - unsigned(p_shl5_cast_fu_470_p1));
    p_addr4_fu_571_p2 <= std_logic_vector(unsigned(p_addr2_cast1_reg_780) + unsigned(tmp_25_trn5_cast_fu_553_p1));
    p_addr7_fu_557_p2 <= std_logic_vector(unsigned(p_addr_cast1_reg_775) + unsigned(tmp_25_trn5_cast_fu_553_p1));
    p_addr9_fu_625_p2 <= std_logic_vector(unsigned(p_addr2_cast1_reg_780) + unsigned(tmp_39_trn_cast_fu_622_p1));
    
    p_addr_reg_660_temp <= signed(p_addr_reg_660);
    p_addr_cast1_fu_526_p1 <= std_logic_vector(resize(p_addr_reg_660_temp,24));

    p_addr_fu_328_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_312_p1) - unsigned(p_shl1_cast_fu_324_p1));
    p_shl1_cast_fu_324_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_316_p3),23));
    p_shl2_cast_fu_351_p1 <= std_logic_vector(resize(unsigned(tmp_45_fu_343_p3),23));
    p_shl3_cast_fu_363_p1 <= std_logic_vector(resize(unsigned(tmp_46_fu_355_p3),23));
    p_shl4_cast_fu_459_p1 <= std_logic_vector(resize(unsigned(tmp_48_fu_452_p3),23));
    p_shl5_cast_fu_470_p1 <= std_logic_vector(resize(unsigned(tmp_49_fu_463_p3),23));
    p_shl_cast_fu_312_p1 <= std_logic_vector(resize(unsigned(tmp_1_fu_304_p3),23));
    tmp6_fu_535_p2 <= std_logic_vector(unsigned(indvar_reg_183) + unsigned(ap_const_lv11_1));
    tmp_1_1_fu_286_p2 <= std_logic_vector(unsigned(indvar1_reg_172) + unsigned(ap_const_lv11_2));
    tmp_1_fu_304_p3 <= (indvar1_reg_172 & ap_const_lv11_0);
    tmp_20_fu_521_p1 <= std_logic_vector(resize(unsigned(reg_246),64));
    tmp_24_fu_630_p1 <= std_logic_vector(resize(unsigned(j_reg_798),64));
    tmp_25_fu_598_p1 <= std_logic_vector(resize(unsigned(reg_242),64));
    tmp_25_trn5_cast_fu_553_p1 <= std_logic_vector(resize(unsigned(j_fu_541_p2),24));
    tmp_28_fu_603_p1 <= std_logic_vector(resize(unsigned(reg_246),64));
    tmp_2_fu_434_p1 <= std_logic_vector(resize(unsigned(reg_242),64));
    tmp_32_fu_608_p1 <= std_logic_vector(resize(unsigned(reg_242),64));
    tmp_36_fu_613_p1 <= std_logic_vector(resize(unsigned(indvar_reg_183),64));
    tmp_38_fu_618_p1 <= std_logic_vector(resize(unsigned(tmp6_reg_791),64));
    tmp_39_trn_cast_fu_622_p1 <= std_logic_vector(resize(unsigned(tmp6_reg_791),24));
    
    p_addr_fu_328_p2_temp <= signed(p_addr_fu_328_p2);
    tmp_44_fu_338_p0 <= std_logic_vector(resize(p_addr_fu_328_p2_temp,32));

    tmp_44_fu_338_p1 <= std_logic_vector(resize(unsigned(tmp_44_fu_338_p0),64));
    tmp_45_fu_343_p3 <= (i_fu_292_p2 & ap_const_lv11_0);
    tmp_46_fu_355_p3 <= (i_fu_292_p2 & ap_const_lv7_0);
    
    p_addr2_fu_367_p2_temp <= signed(p_addr2_fu_367_p2);
    tmp_47_fu_377_p0 <= std_logic_vector(resize(p_addr2_fu_367_p2_temp,32));

    tmp_47_fu_377_p1 <= std_logic_vector(resize(unsigned(tmp_47_fu_377_p0),64));
    tmp_48_fu_452_p3 <= (tmp_1_1_reg_646 & ap_const_lv11_0);
    tmp_49_fu_463_p3 <= (tmp_1_1_reg_646 & ap_const_lv7_0);
    
    p_addr3_fu_474_p2_temp <= signed(p_addr3_fu_474_p2);
    tmp_50_fu_484_p0 <= std_logic_vector(resize(p_addr3_fu_474_p2_temp,32));

    tmp_50_fu_484_p1 <= std_logic_vector(resize(unsigned(tmp_50_fu_484_p0),64));
    tmp_51_fu_402_p3 <= (tmp_1_2_reg_680 & ap_const_lv1_1);
    
    tmp_51_fu_402_p3_temp <= signed(tmp_51_fu_402_p3);
    tmp_52_fu_413_p0 <= std_logic_vector(resize(tmp_51_fu_402_p3_temp,32));

    tmp_52_fu_413_p1 <= std_logic_vector(resize(unsigned(tmp_52_fu_413_p0),64));
    tmp_54_fu_418_p3 <= (tmp_53_reg_685 & ap_const_lv1_1);
    
    tmp_54_fu_418_p3_temp <= signed(tmp_54_fu_418_p3);
    tmp_55_fu_429_p0 <= std_logic_vector(resize(tmp_54_fu_418_p3_temp,32));

    tmp_55_fu_429_p1 <= std_logic_vector(resize(unsigned(tmp_55_fu_429_p0),64));
    tmp_56_fu_489_p4 <= p_addr3_fu_474_p2(22 downto 1);
    tmp_57_fu_499_p3 <= (tmp_56_fu_489_p4 & ap_const_lv1_1);
    
    tmp_57_fu_499_p3_temp <= signed(tmp_57_fu_499_p3);
    tmp_58_fu_511_p0 <= std_logic_vector(resize(tmp_57_fu_499_p3_temp,32));

    tmp_58_fu_511_p1 <= std_logic_vector(resize(unsigned(tmp_58_fu_511_p0),64));
    
    p_addr7_fu_557_p2_temp <= signed(p_addr7_fu_557_p2);
    tmp_59_fu_566_p0 <= std_logic_vector(resize(p_addr7_fu_557_p2_temp,32));

    tmp_59_fu_566_p1 <= std_logic_vector(resize(unsigned(tmp_59_fu_566_p0),64));
    tmp_5_fu_316_p3 <= (indvar1_reg_172 & ap_const_lv7_0);
    
    p_addr4_fu_571_p2_temp <= signed(p_addr4_fu_571_p2);
    tmp_60_fu_580_p0 <= std_logic_vector(resize(p_addr4_fu_571_p2_temp,32));

    tmp_60_fu_580_p1 <= std_logic_vector(resize(unsigned(tmp_60_fu_580_p0),64));
    
    p_addr1_reg_816_temp <= signed(p_addr1_reg_816);
    tmp_61_fu_593_p0 <= std_logic_vector(resize(p_addr1_reg_816_temp,32));

    tmp_61_fu_593_p1 <= std_logic_vector(resize(unsigned(tmp_61_fu_593_p0),64));
    
    p_addr9_reg_851_temp <= signed(p_addr9_reg_851);
    tmp_62_fu_641_p0 <= std_logic_vector(resize(p_addr9_reg_851_temp,32));

    tmp_62_fu_641_p1 <= std_logic_vector(resize(unsigned(tmp_62_fu_641_p0),64));
    tmp_63_fu_634_p1 <= grp_fu_227_p1(16 - 1 downto 0);
    tmp_6_fu_439_p1 <= std_logic_vector(resize(unsigned(reg_246),64));

    -- tmp_address0 assign process. --
    tmp_address0_assign_proc : process(ap_CS_fsm, tmp_36_fu_613_p1, tmp_24_fu_630_p1)
    begin
        if ((ap_ST_st48_fsm_47 = ap_CS_fsm)) then 
            tmp_address0 <= tmp_24_fu_630_p1(11 - 1 downto 0);
        elsif ((ap_ST_st25_fsm_24 = ap_CS_fsm)) then 
            tmp_address0 <= ap_const_lv11_0;
        elsif ((ap_ST_st42_fsm_41 = ap_CS_fsm)) then 
            tmp_address0 <= tmp_36_fu_613_p1(11 - 1 downto 0);
        else 
            tmp_address0 <= tmp_24_fu_630_p1(11 - 1 downto 0);
        end if; 
    end process;


    -- tmp_address1 assign process. --
    tmp_address1_assign_proc : process(ap_CS_fsm, tmp_38_fu_618_p1)
    begin
        if ((ap_ST_st25_fsm_24 = ap_CS_fsm)) then 
            tmp_address1 <= ap_const_lv11_1;
        elsif ((ap_ST_st42_fsm_41 = ap_CS_fsm)) then 
            tmp_address1 <= tmp_38_fu_618_p1(11 - 1 downto 0);
        else 
            tmp_address1 <= ap_const_lv11_1;
        end if; 
    end process;


    -- tmp_ce0 assign process. --
    tmp_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st42_fsm_41 = ap_CS_fsm) or (ap_ST_st25_fsm_24 = ap_CS_fsm) or (ap_ST_st48_fsm_47 = ap_CS_fsm))) then 
            tmp_ce0 <= ap_const_logic_1;
        else 
            tmp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- tmp_ce1 assign process. --
    tmp_ce1_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st42_fsm_41 = ap_CS_fsm) or (ap_ST_st25_fsm_24 = ap_CS_fsm))) then 
            tmp_ce1 <= ap_const_logic_1;
        else 
            tmp_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_d0 <= reg_272;
    tmp_d1 <= reg_280;
    tmp_s_fu_516_p1 <= std_logic_vector(resize(unsigned(reg_242),64));

    -- tmp_we0 assign process. --
    tmp_we0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st25_fsm_24 = ap_CS_fsm) or (ap_ST_st48_fsm_47 = ap_CS_fsm))) then 
            tmp_we0 <= ap_const_logic_1;
        else 
            tmp_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- tmp_we1 assign process. --
    tmp_we1_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st25_fsm_24 = ap_CS_fsm))) then 
            tmp_we1 <= ap_const_logic_1;
        else 
            tmp_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
